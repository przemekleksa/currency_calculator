{"version":3,"sources":["components/form/form.js","components/addTransaction/add.js","components/currency/currency.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Form","handleChange","event","val","target","value","isNaN","alert","props","changeValue","rate","this","console","log","exchangeRate","className","onSubmit","handleSubmit","type","placeholder","onChange","Component","connect","state","dispatch","change","AddTransaction","preventDefault","name","amount","transaction","parseFloat","addTransaction","eur","id","Currency","handleClick","deletePost","posts","sumEur","sumPln","i","length","pln","items","map","item","key","toFixed","replace","onClick","App","Boolean","window","location","hostname","match","initState","rootReducer","action","newPosts","filter","post","newRate","newCalc","newName","newAmount","newPln","newId","newTransaction","String","parseInt","concat","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c052e056.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './form.scss';\r\n\r\nclass Form extends Component {\r\n    \r\n    handleChange = (event) =>{\r\n        \r\n        let val = event.target.value\r\n        if (isNaN(val)){\r\n            alert('Please type a number')\r\n            event.target.value = 4.30\r\n        }\r\n        \r\n        this.props.changeValue(event.target.value);\r\n    }\r\n\r\n\r\n    render() { \r\n        const rate = this.props;\r\n        console.log(rate.exchangeRate[0].rate)\r\n        return ( \r\n            <div className=\"exchange-rate-form\">\r\n            \r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div> \r\n                        1 EUR =\r\n                    </div>\r\n                    <label>\r\n                        <input type=\"text\" placeholder=\"enter exchange rate here\" onChange={this.handleChange} />\r\n                    </label>\r\n                </form>\r\n                <div>\r\n                    current exchange rate: <span>1 EUR = {rate.exchangeRate[0].rate} PLN</span>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        exchangeRate: state.exchangeRate\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeValue: (change) => {\r\n            dispatch({\r\n                type: \"CHANGE_RATE\", rate: change\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './add.scss';\r\n\r\nclass AddTransaction extends Component {\r\n\r\n   handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        let name = event.target.name.value\r\n        let amount = event.target.amount.value\r\n        // preventing of wrong data formats entered by user\r\n        if (name === \"\"){\r\n            alert('enter name')\r\n        } else\r\n        if (isNaN(amount)){\r\n            alert('enter number into amount')\r\n        } else if (name !== \"\" && isNaN(amount) === false){\r\n            amount = parseFloat(amount);\r\n            let transaction = {name, amount}\r\n            this.props.addTransaction(transaction)\r\n        }\r\n        \r\n   }\r\n    render() { \r\n        return ( \r\n            <div className=\"add-transaction\">\r\n               <form onSubmit={this.handleSubmit}>\r\n               <div className=\"labels\">\r\n                <div className=\"label\">Name:</div>\r\n                <div className=\"label\">Amount:</div>\r\n               </div>\r\n                    <label>\r\n                        <input type=\"text\" name=\"name\"/>\r\n                        <input type=\"text\" name=\"amount\"/>\r\n                        <div>EUR</div>\r\n                       <button>Add</button>\r\n                    </label>\r\n                </form>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTransaction: (transaction) => {\r\n            dispatch({\r\n                type: 'ADD_TRANSACTION', name: transaction.name, eur: transaction.amount, id: \"4\"\r\n            })\r\n        }\r\n    }\r\n}\r\n \r\nexport default connect(null, mapDispatchToProps)(AddTransaction);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './currency.scss';\r\nimport Form from '../form/form';\r\nimport AddTransaction from '../addTransaction/add';\r\n\r\nclass Currency extends Component {\r\n    handleClick = (id) => {\r\n        this.props.deletePost(id);\r\n    }\r\n    render() { \r\n        const { posts } = this.props;\r\n\r\n        // counting sum of all transactions\r\n        let sumEur=0\r\n        let sumPln=0\r\n        for(let i=0; i < this.props.posts.length; i++){\r\n            sumEur += this.props.posts[i].eur\r\n            sumPln += this.props.posts[i].pln\r\n        }\r\n\r\n        this.items = posts.map((item, key) =>\r\n        <li key={item.id}>\r\n            <div className='transaction-name'>{item.name}</div>\r\n            <div className='eur'>{item.eur.toFixed(2).replace(/[.,]00$/, \"\")} EUR</div>  \r\n            <div className='pln'>{item.pln.toFixed(2).replace(/[.,]00$/, \"\")} PLN</div>\r\n            <button onClick={() => this.handleClick(`${item.id}`)}>Delete</button></li>)\r\n        return (\r\n            <div className=\"container\"> \r\n                <div className=\"calc\">\r\n                \r\n                    <h1>\r\n                    EUR/PLN exchange\r\n                    </h1>\r\n                    <h2>Please enter exchange rate for 1 euro</h2>\r\n                    <Form />\r\n                    <AddTransaction />\r\n                </div>\r\n                <div className=\"transaction-list\">\r\n                    <div className=\"total-value\">\r\n                        <div className=\"total\">\r\n                            <div>Total value of all transactions:</div>\r\n                            <div>\r\n                                {sumEur.toFixed(2).replace(/[.,]00$/, \"\")} EUR\r\n                            </div>\r\n                            <div>\r\n                                {sumPln.toFixed(2).replace(/[.,]00$/, \"\")} PLN\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        \r\n                    </div>\r\n                    <div className=\"list\">\r\n                        <ul>\r\n                        {\r\n                        this.items \r\n                        }\r\n                        </ul>\r\n                    </div>\r\n                   \r\n                </div>\r\n                \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deletePost: (id) => {\r\n            dispatch({\r\n                type:'DELETE', id: id\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency);","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Currency from './components/currency/currency';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Currency />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    posts: [\r\n        {id: '1', name: 'loan', eur: 16444.34, pln: 70710.662},\r\n        {id: '2', name: 'car payment', eur: 345.34, pln: 1484.962},\r\n        {id: '3', name: 'new sofa', eur: 5435.00, pln: 23370.5}\r\n    ],\r\n    exchangeRate: [\r\n        {rate: 4.30}\r\n    ]\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type === \"DELETE\") {\r\n        let newPosts = state.posts.filter(post => {\r\n            return action.id !== post.id\r\n        });\r\n     \r\n        return {\r\n            ...state,\r\n            posts: newPosts\r\n        }\r\n    }\r\n    if (action.type === \"CHANGE_RATE\") {\r\n     \r\n        let newRate = action.rate\r\n        let newCalc = state.posts.map((item) => {\r\n            item = {...item, pln: action.rate * item.eur}\r\n            return item\r\n        })\r\n        return {\r\n            ...state,\r\n            exchangeRate: [{rate: newRate}],\r\n            posts: newCalc\r\n            }\r\n    }\r\n    if (action.type === \"ADD_TRANSACTION\") {\r\n        let newName = action.name;\r\n        let newAmount = action.eur;\r\n        let newPln = newAmount * state.exchangeRate[0].rate;\r\n        let newId = \"0\";\r\n        if(state.posts.length > 0){\r\n            newId = state.posts[state.posts.length-1].id\r\n        }\r\n        newId = String(parseInt(newId) + 1)\r\n        let newTransaction = {id: newId, name: newName, eur: newAmount, pln: newPln}\r\n        return {\r\n            ...state,\r\n            posts:  state.posts.concat(newTransaction)\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}